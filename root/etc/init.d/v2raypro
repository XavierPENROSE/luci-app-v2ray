#!/bin/sh /etc/rc.common

START=99
# local port is defined in $V2_CONF_GENERATE_LUA
SS_REDIR_PORT=7070
SS_REDIR_PIDFILE=/var/run/v2ray-go.pid
PDNSD_LOCAL_PORT=7453
SSRCONF=/etc/v2ray/config.json
V2_CONF_GENERATE_LUA=/etc/v2ray/gen_config.lua
CRON_FILE=/etc/crontabs/root
CONFIG=v2ray
V2RAY_EXEC_PATH=/usr/bin/v2ray/v2ray


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	# $covered_subnets, $local_addresses are not required
covered_subnets=`uci get v2ray.@v2ray[0].covered_subnets 2>/dev/null`
local_addresses=`uci get v2ray.@v2ray[0].local_addresses 2>/dev/null`
	# Get LAN settings as default parameters
	[ -f /lib/functions/network.sh ] && . /lib/functions/network.sh
	[ -z "$covered_subnets" ] && network_get_subnet covered_subnets lan
	[ -z "$local_addresses" ] && network_get_ipaddr local_addresses lan
vt_np_ipset="china"  # Must be global variable

__gfwlist_by_mode()
{
	case "$1" in
		V) echo unblock-youku;;
		*) echo china-banned;;
	esac
}



# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

start()
{
  local vt_enabled=`uci get v2ray.@v2ray[0].enabled 2>/dev/null`
  local vt_safe_dns=`uci get v2ray.@v2ray[0].safe_dns 2>/dev/null`
  local vt_safe_dns_port=`uci get v2ray.@v2ray[0].safe_dns_port 2>/dev/null`
  local vt_safe_dns_tcp=`uci get v2ray.@v2ray[0].safe_dns_tcp 2>/dev/null`
  local vt_proxy_mode=`uci get v2ray.@v2ray[0].proxy_mode`
  local vt_server_addr=`uci get v2ray.@v2ray[0].address`
  local cron_mode=`uci get v2ray.@v2ray[0].cron_mode 2>/dev/null`
  local vt_gfwlist=`__gfwlist_by_mode $vt_proxy_mode`
  local use_conf_file=`uci get v2ray.@v2ray[0].use_conf_file 2>/dev/null`
  local conf_file_path=`uci get v2ray.@v2ray[0].conf_file_path 2>/dev/null`
  local conf_file_type=`uci get v2ray.@v2ray[0].conf_file_type 2>/dev/null`
  local monitor=`uci get v2ray.@v2ray[0].monitor 2>/dev/null`
  local bin_dir=`uci get v2ray.@v2ray[0].bin_dir 2>/dev/null` 
 
 	[ "$vt_enabled" = "0" ] && exit
 	mkdir -p $bin_dir/etc

#	ln -s /etc/gfwlist/china-banned /etc/v2ray/base-gfwlist.txt

	[ ! -f "$bin_dir/etc/v2ray/v2ray" ] && {
		[ -h "/usr/bin/v2ray/v2ray" ] && [ ! -f "$bin_dir/etc/v2ray/v2ray" ] && rm -rf /usr/bin/v2ray
		[ ! -h "/usr/bin/v2ray/v2ray" ] && [ ! -f "/usr/bin/v2ray/v2ray" ] && download_binary
		[ ! -h "/usr/bin/v2ray/v2ray" ] && [ ! -f "/usr/bin/v2ray/v2ray" ] && logger -t V2ray 'Download v2ray failed, please retry.' && exit 0
	}

	[ -f /etc/init.d/pdnsd ] && /etc/init.d/pdnsd disable 2>/dev/null

	# -----------------------------------------------------------------
	if [ "$vt_enabled" = 0 ]; then
		echo "WARNING: V2Ray is disabled."
		return 1
	fi

	[ -z "$vt_proxy_mode" ] && vt_proxy_mode=M
	[ -z "$vt_method" ] && vt_method=table
	[ -z "$vt_timeout" ] && vt_timeout=60
	case "$vt_proxy_mode" in
		M|S|G)
			[ -z "$vt_safe_dns" ] && vt_safe_dns="8.8.8.8"
			[ -z "$vt_safe_dns_tcp" ] && vt_safe_dns_tcp=1
			;;
	esac
	[ -z "$vt_safe_dns_port" ] && vt_safe_dns_port=53

	# -----------------------------------------------------------------
	###### v2ray ######

	if [ "$use_conf_file" = 0 ]; then
	   	/usr/bin/lua $V2_CONF_GENERATE_LUA $CONFIG $SSRCONF
	    $V2RAY_EXEC_PATH -config=$SSRCONF &
	else
	   $V2RAY_EXEC_PATH -config=$conf_file_path -format=$conf_file_type &
    fi

	sleep 3
	if pidof v2ray>/dev/null; then
	   echo "V2Ray started"
	 else
	   return 1
    fi

	# IPv4 firewall rules
	add_rule

	# -----------------------------------------------------------------
	mkdir -p /var/dnsmasq.d
	###### Anti-pollution configuration ######
	if [ -n "$vt_safe_dns" ]; then
		if [ "$vt_safe_dns_tcp" = 1 ]; then
			start_pdnsd "$vt_safe_dns"
			awk -vs="127.0.0.1#$PDNSD_LOCAL_PORT" '!/^$/&&!/^#/{printf("server=/%s/%s\n",$0,s)}' \
				/etc/gfwlist/$vt_gfwlist > /var/dnsmasq.d/01-pollution.conf
		else
			awk -vs="$vt_safe_dns#$vt_safe_dns_port" '!/^$/&&!/^#/{printf("server=/%s/%s\n",$0,s)}' \
				/etc/gfwlist/$vt_gfwlist > /var/dnsmasq.d/01-pollution.conf
		fi
	else
		echo "WARNING: Not using secure DNS, DNS resolution might be polluted if you are in China."
	fi

	###### dnsmasq-to-ipset configuration ######
	case "$vt_proxy_mode" in
		M|V)
			awk '!/^$/&&!/^#/{printf("ipset=/%s/'"$vt_gfwlist"'\n",$0)}' \
				/etc/gfwlist/$vt_gfwlist > /var/dnsmasq.d/02-ipset.conf
			;;
	esac

	# -----------------------------------------------------------------
	###### Restart main 'dnsmasq' service if needed ######
	if ls /var/dnsmasq.d/* >/dev/null 2>&1; then
		mkdir -p /var/dnsmasq.d
		grep "conf-dir=/var/dnsmasq.d" /etc/dnsmasq.conf ||echo 'conf-dir=/var/dnsmasq.d' >> /etc/dnsmasq.conf
#		cat > /var/dnsmasq.d/dnsmasq-go.conf <<EOF
#conf-dir=/var/dnsmasq.d
#EOF
		/etc/init.d/dnsmasq restart
	fi
	[ "$monitor" = "1" ] && add_cron
}

stop()
{

	# -----------------------------------------------------------------
	rm -rf /var/dnsmasq.d
	/etc/init.d/dnsmasq restart

	stop_pdnsd

	# --STOP IPv4 firewall---------------------------------------------------------------
	del_rule

	# -----------------------------------------------------------------
	if [ -f $SS_REDIR_PIDFILE ]; then
		kill -9 `cat $SS_REDIR_PIDFILE`
		rm -f $SS_REDIR_PIDFILE
	fi
	killall -9 v2ray 2>/dev/null
	del_cron
	uci set v2ray.v2ray.more=0
	uci commit v2ray
}

UpdateApp() {
	for a in $(opkg print-architecture | awk '{print $2}'); do
		case "$a" in
			all|noarch)
				;;
			aarch64_armv8-a|arm_arm1176jzf-s_vfp|arm_arm926ej-s|arm_cortex-a15_neon-vfpv4|arm_cortex-a5|arm_cortex-a53_neon-vfpv4|arm_cortex-a7_neon-vfpv4|arm_cortex-a8_vfpv3|arm_cortex-a9|arm_cortex-a9_neon|arm_cortex-a9_vfpv3|arm_fa526|arm_mpcore|arm_mpcore_vfp|arm_xscale|armeb_xscale)
				ARCH="arm"
				;;
			i386_pentium|i386_pentium4)
				ARCH="32"
				;;
			ar71xx|mips_24kc|mips_mips32|mips64_octeon)
				ARCH="mips"
				;;
			mipsel_24kc|mipsel_24kec_dsp|mipsel_74kc|mipsel_mips32|mipsel_1004kc_dsp)
				ARCH="mipsle"
				;;
			x86_64)
				ARCH="64"
				;;
			*)
				exit 0
				;;
		esac
	done
}

download_binary(){
	version_g=$(uci get v2ray.v2ray.version_g)
	version_d=$(uci get v2ray.v2ray.version_d)
	version_c=$(uci get v2ray.v2ray.version_c)
	dl_mod=$(uci get v2ray.v2ray.dl_mod)
	c_url=$(uci get v2ray.v2ray.c_url)
	bin_dir=$(uci get v2ray.v2ray.bin_dir)

	echo `date` "开始下载v2ray二进制文件..."
	UpdateApp

	cd $bin_dir/etc 

	if [ $dl_mod = "git" ]; then
		version="$version_g"
		down_url=https://github.com/v2ray/v2ray-core/releases/download/v"$version"/v2ray-linux-"$ARCH".zip
	elif [ $dl_mod = "blog" ]; then
		version="$version_d"
		down_url=https://www.myopenwrt.org/wp-content/uploads/2018/04/v2ray-linux-"$ARCH"-v"$version".zip
	else
		version="$version_c"
		down_url="$c_url"/v2ray-linux-"$ARCH".zip
	fi

	local a=0
	while [ ! -f $bin_dir/etc/v2ray-linux-"$ARCH"*.zip ]; do
		[ $a = 6 ] && exit
		/usr/bin/wget -T10 $down_url
		sleep 2
		let "a = a + 1"
	done
	killall -9 pidof openssl

	unzip v2ray-linux-"$ARCH"*.zip
	mv $bin_dir/etc/v2ray-v"$version"-linux-"$ARCH"/ $bin_dir/etc/v2ray
	rm -rf $bin_dir/etc/v2ray*.zip
	[ -h "/usr/bin/v2ray" ] && rm -rf /usr/bin/v2ray
	ln -s $bin_dir/etc/v2ray/ /usr/bin/

	if [ -f "/usr/bin/v2ray/v2ray" ]; then
		chmod +x /usr/bin/v2ray/v2*  && echo `date` "成功下载v2ray二进制文件"
	else
		echo `date` "下载v2ray二进制文件失败，请重试！"
	fi
}


restart()
{
	KEEP_GFWLIST=Y
	stop
	start
}

boot() {
	local delay=`uci get v2ray.@v2ray[0].delay 2>/dev/null`
	sleep $delay
	start
}

reload()
{
  local vt_enabled=`uci get v2ray.@v2ray[0].enabled 2>/dev/null`
  local vt_server_addr=`uci get v2ray.@v2ray[0].address`
  local vt_safe_dns=`uci get v2ray.@v2ray[0].safe_dns 2>/dev/null`
  local vt_safe_dns_port=`uci get v2ray.@v2ray[0].safe_dns_port 2>/dev/null`
  local vt_safe_dns_tcp=`uci get v2ray.@v2ray[0].safe_dns_tcp 2>/dev/null`
  local vt_proxy_mode=`uci get v2ray.@v2ray[0].proxy_mode`
  local vt_gfwlist=`__gfwlist_by_mode $vt_proxy_mode`
	KEEP_GFWLIST=Y
	del_rule
	add_rule
	if [ "$vt_safe_dns_tcp" = 1 ]; then
    stop_pdnsd
    start_pdnsd
	fi
}

# $1: upstream DNS server
start_pdnsd()
{
	local safe_dns="$1"

	local tcp_dns_list="1.0.0.1,1.1.1.1,4.2.2.1,4.2.2.2,8.8.4.4,8.8.8.8,9.9.9.9,208.67.222.222,208.67.220.220,1.0.0.1:443,1.1.1.1:443,1.0.0.1:853,1.1.1.1:853,208.67.222.222:443,208.67.220.220:443,208.67.222.222:5353,208.67.220.220:5353,2001:4860:4860::8844,2001:4860:4860::8888,2606:4700:4700::1111,2606:4700:4700::1001"
	[ -n "$safe_dns" ] && tcp_dns_list="$safe_dns,$tcp_dns_list"
	
	uci set dnsforwarder.@arguments[0].enabled=1
	uci set dnsforwarder.@arguments[0].redir=0
	
	uci commit dnsforwarder
	
	[ ! -f "/etc/dnsforwarder/dnsforwarder.conf.bak" ] && {
		cp /etc/dnsforwarder/dnsforwarder.conf /etc/dnsforwarder/dnsforwarder.conf.bak
	}
	cat > /etc/dnsforwarder/dnsforwarder.conf <<EOF
LogOn true
LogFileThresholdLength 102400
LogFileFolder /var/log
UDPLocal 0.0.0.0:$PDNSD_LOCAL_PORT
TCPGroup $tcp_dns_list * no
GroupFile
BlockIP 243.185.187.39,46.82.174.68,37.61.54.158,93.46.8.89,59.24.3.173,203.98.7.65,8.7.198.45,78.16.49.15,159.106.121.75,69.63.187.12,31.13.76.8,31.13.64.49
IPSubstituting
BlockNegativeResponse false
Hosts
HostsUpdateInterval 18000
HostsDownloadPath
HostsScript
HostsRetryInterval 30
AppendHosts
BlockIpv6WhenIpv4Exists false
UseCache true
CacheSize 1048576
MemoryCache true
CacheFile
IgnoreTTL false
OverrideTTL -1
MultipleTTL 1
ReloadCache false
OverwriteCache false
DisabledType
DisabledDomain
DisabledList
DomainStatistic false
DomainStatisticTempletFile
StatisticUpdateInterval 29
EOF

/etc/init.d/dnsforwarder restart


	# Access TCP DNS server through V2Ray tunnel
	if iptables -t nat -N pdnsd_output; then
		iptables -t nat -A pdnsd_output -m set --match-set $vt_np_ipset dst -j RETURN
		iptables -t nat -A pdnsd_output -p tcp -j REDIRECT --to $SS_REDIR_PORT
	fi
	iptables -t nat -I OUTPUT -p tcp --dport 53 -j pdnsd_output
}

stop_pdnsd()
{
	if iptables -t nat -F pdnsd_output 2>/dev/null; then
		while iptables -t nat -D OUTPUT -p tcp --dport 53 -j pdnsd_output 2>/dev/null; do :; done
		iptables -t nat -X pdnsd_output
	fi
	killall -q -9 dnsforwarder
	uci set dnsforwarder.@arguments[0].enabled=0
	uci set dnsforwarder.@arguments[0].redir=0
	uci commit dnsforwarder

	[ -f  "/etc/dnsforwarder/dnsforwarder.conf.bak" ] && cp /etc/dnsforwarder/dnsforwarder.conf.bak /etc/dnsforwarder/dnsforwarder.conf
	rm -f /etc/dnsforwarder/dnsforwarder.conf.bak
	/etc/init.d/dnsforwarder restart
}

add_cron()
{
  sed -i '/up-gfwlist.sh/d' $CRON_FILE
	sed -i '/v2ray_watchdog.log/d' $CRON_FILE
	if [ $cron_mode -eq 1 ]; then
		echo '0 5 * * * /etc/v2ray/up-gfwlist.sh > /tmp/gfwupdate.log 2>&1' >> $CRON_FILE
	fi
	echo '0 */1 * * * /etc/v2ray/v2ray-watchdog >> /tmp/v2ray_watchdog.log 2>&1' >> $CRON_FILE
	echo '0 1 * * 0 echo "" > /tmp/v2ray_watchdog.log' >> $CRON_FILE
	crontab $CRON_FILE
}

del_cron()
{
	sed -i '/up-gfwlist.sh/d' $CRON_FILE
	sed -i '/v2ray_watchdog.log/d' $CRON_FILE
	/etc/init.d/cron restart
}



uci_get_by_name() {
	local ret=$(uci get $CONFIG.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local index=0
	if [ -n $4 ]; then
		index=$4
	fi
	local ret=$(uci get $CONFIG.@$1[$index].$2 2>/dev/null)
	echo ${ret:=$3}
}

is_ipv6_address()
{
		echo "$1" | grep -q ":"
}

add_rule()
{
	iptables -t nat -N v2ray_pre
	iptables -t nat -F v2ray_pre
	iptables -t nat -A v2ray_pre -m set --match-set local dst -j RETURN || {
		iptables -t nat -A v2ray_pre -d 0.0.0.0/8 -j RETURN
		iptables -t nat -A v2ray_pre -d 10.0.0.0/8 -j RETURN
		iptables -t nat -A v2ray_pre -d 127.0.0.0/8 -j RETURN
		iptables -t nat -A v2ray_pre -d 169.254.0.0/16 -j RETURN
		iptables -t nat -A v2ray_pre -d 172.16.0.0/12 -j RETURN
		iptables -t nat -A v2ray_pre -d 192.168.0.0/16 -j RETURN
		iptables -t nat -A v2ray_pre -d 224.0.0.0/4 -j RETURN
		iptables -t nat -A v2ray_pre -d 240.0.0.0/4 -j RETURN
	}

	iptables -t nat -A v2ray_pre -d $vt_server_addr -j RETURN

	iptables -N gameboost -t mangle
	ipset -! create gameuser hash:ip maxelem 65536 2>/dev/null
	/usr/bin/ip rule add fwmark 0x01/0x01 table 100
	/usr/bin/ip route add local 0.0.0.0/0 dev lo table 100
	iptables -t mangle -A gameboost -p udp -m set --match-set local dst -j RETURN
	iptables -t mangle -A gameboost -p udp -m set --match-set china dst -j RETURN
	iptables -t mangle -A gameboost -p udp --dport 53 -j RETURN
	iptables -t mangle -A gameboost -p udp -j TPROXY --on-port 7070 --tproxy-mark 0x01/0x01
	iptables -t mangle -A PREROUTING -m set --match-set gameuser src -j gameboost

	for i in $(seq 0 100)
	do
		local ip=$(uci_get_by_type acl_rule ipaddr '' $i)
		local mode=$(uci_get_by_type acl_rule filter_mode '' $i)
		case "$mode" in
		disable)
			iptables -t nat -A v2ray_pre -s $ip -j RETURN
			;;
		global)
			iptables -t nat -A v2ray_pre -s $ip -p tcp -j REDIRECT --to $SS_REDIR_PORT
			iptables -t nat -A v2ray_pre -s $ip -j RETURN
			;;
		game)
			iptables -t nat -A v2ray_pre -p tcp -s $ip -m set ! --match-set china dst -j REDIRECT --to $SS_REDIR_PORT
			ipset -! add gameuser $ip
			;;
		esac
	done

	case "$vt_proxy_mode" in
		G) : ;;
		S)
			iptables -t nat -A v2ray_pre -m set --match-set $vt_np_ipset dst -j RETURN
			iptables -t nat -I OUTPUT -p tcp -m multiport --dports 80,443 -m set ! --match-set $vt_np_ipset dst -j REDIRECT --to $SS_REDIR_PORT
			# Add line below to prevent traffic of v2ray from redirecting to itself.
			iptables -t nat -I OUTPUT -d $vt_server_addr -j RETURN

			;;
		M)
			ipset -! create $vt_gfwlist hash:ip maxelem 65536 2>/dev/null
      awk '!/^$/&&!/^#/{printf("add vt_gfwlist %s'" "'\n",$0)}' /etc/v2ray/addinip.txt > /tmp/addinip.ipset
      sed -i "s/vt_gfwlist/$vt_gfwlist/g" /tmp/addinip.ipset
      ipset -! restore < /tmp/addinip.ipset
			iptables -t nat -A v2ray_pre -m set ! --match-set $vt_gfwlist dst -j RETURN
			iptables -t nat -A v2ray_pre -m set --match-set $vt_np_ipset dst -j RETURN
			iptables -t nat -I OUTPUT -p tcp -m multiport --dports 80,443 -m set --match-set $vt_gfwlist dst -j REDIRECT --to $SS_REDIR_PORT
			;;
		V)
			vt_np_ipset=""
			ipset -! create $vt_gfwlist hash:ip maxelem 65536 2>/dev/null
			iptables -t nat -A v2ray_pre -m set ! --match-set $vt_gfwlist dst -j RETURN
			;;
	esac
	local subnet
	for subnet in $covered_subnets; do
		iptables -t nat -A v2ray_pre -s $subnet -p tcp -j REDIRECT --to $SS_REDIR_PORT
	done
	iptables -t nat -I PREROUTING -p tcp -j v2ray_pre
}

del_rule()
{
	if iptables -t nat -F v2ray_pre 2>/dev/null; then
		while iptables -t nat -D PREROUTING -p tcp -j v2ray_pre 2>/dev/null; do :; done
		iptables -t nat -X v2ray_pre 2>/dev/null
	fi

	iptables -t nat -D OUTPUT -p tcp -m multiport --dports 80,443 -m set --match-set china-banned dst -j REDIRECT --to $SS_REDIR_PORT 2>/dev/null
	iptables -t nat -D OUTPUT -p tcp -m multiport --dports 80,443 -m set ! --match-set $vt_np_ipset dst -j REDIRECT --to $SS_REDIR_PORT 2>/dev/null
	# Add line below to delete the rule preventing traffic of v2ray from redirecting to itself.
	iptables -t nat -D OUTPUT -d $vt_server_addr -j RETURN 2>/dev/null

	
	/usr/bin/ip rule del fwmark 0x01/0x01 table 100
	/usr/bin/ip route del local 0.0.0.0/0 dev lo table 100
	if iptables -t mangle -F gameboost 2>/dev/null; then
		while iptables -t mangle -D PREROUTING -m set --match-set gameuser src -j gameboost 2>/dev/null; do :; done
		iptables -t mangle -X gameboost 2>/dev/null
	fi

	ipset destroy gameuser 2>/dev/null


	# -----------------------------------------------------------------
	[ "$KEEP_GFWLIST" = Y ] || ipset destroy "$vt_gfwlist" 2>/dev/null
}
